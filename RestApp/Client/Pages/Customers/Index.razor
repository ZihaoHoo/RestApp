@page "/customers/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]



<h3 class="card-title">Tables</h3>
<br />
<a href="/customers/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Payment Types
</a>
<br />
<br />

@if (Customers == null)
{
<div class="alert alert-info">Loading PaymentTypes ...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Contact Number</th>
                <th>Email Address</th>
                <th>Request</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in Customers)
            {
                <tr>
                    <td>@customer.FirstName @customer.LastName</td>
                    <td>@customer.ContactNumber</td>
                    <td>@customer.EmailAddress</td>
                    <td>@customer.Request</td>
                    <td>
                        <a href="/customers/view/@customer.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/customers/edit/@customer.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(customer.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<Customer> Customers;
    protected async override Task OnInitializedAsync()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }
    async Task Delete(int CustomerId)
    {
        var customer = Customers.First(q => q.Id == CustomerId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {customer.LastName}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.CustomersEndpoint}/{CustomerId}");
            await OnInitializedAsync();
        }
    }
}