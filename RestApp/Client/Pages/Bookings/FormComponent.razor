@inject HttpClient _client

<EditForm Model="@booking" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Pax: </label>
            <div>
                <InputSelect @bind-Value="booking.CustomerId" class="form-control">
                    <option value="">-- Select Customer --</option>
                    @if (Customers != null)
                    {
                        foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">@customer.FirstName @customer.LastName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(()=> booking.CustomerId)" />
            </div>
        </div>

        <div class="form-group">
            <label>reservation Date: </label>
            <div>
                <InputDate @bind-Value="booking.BkDate" class="form-control">
                    @if(booking.BkDate==null){
                        booking.BkDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 0, 0, 0);
                    }
                </InputDate>
                <ValidationMessage For="@(()=> booking.BkDate)" />
            </div>
        </div>

        <div class="form-group">
            <label>reservation Time: </label>
            <div>
                <SfTimePicker TValue="DateTime?" @bind-Value='@booking.BkTime' StrictMode=true Min='@MinVal' Max='@MaxVal'  ShowClearButton="true">
                    @if (booking.BkTime == null) {
                        booking.BkDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, DateTime.Now.Hour, 0, 0);
                    }
                </SfTimePicker>
            </div>
        </div>

        <div class="form-group">
            <label>Restaurant: </label>
            <div>
                <InputSelect @bind-Value="booking.RestId" class="form-control">
                    <option value="">-- Select Restaurant --</option>
                    @if (Restaurants != null)
                    {
                        foreach (var restaurant in Restaurants)
                        {
                            <option value="@restaurant.Id">@restaurant.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(()=> booking.RestId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Pax: </label>
            <div>
                <InputNumber @bind-Value="booking.Pax" class="form-control" />
                <ValidationMessage For="@(()=> booking.Pax)" />
            </div>
        </div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class=" btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="bookings" />
</EditForm>
@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Booking booking { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public DateTime MinVal { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 00, 00, 00);
    [Parameter] public DateTime MaxVal { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 23, 00, 00);

    private IList<Restaurant> Restaurants;
    private IList<Customer> Customers;

    protected async override Task OnInitializedAsync()
    {

        Restaurants = await _client.GetFromJsonAsync<List<Restaurant>>($"{Endpoints.RestaurantsEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }
}